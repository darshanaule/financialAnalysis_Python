# -*- coding: utf-8 -*-
"""Copy of Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sMtBadwbKwhm-EcE5BnhtZfIC8h69YEh
"""

import pandas as pd
import numpy as np
import matplotlib
from matplotlib import colors
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.tree import plot_tree
from sklearn.model_selection import GridSearchCV
import seaborn as sns
import sqlite3
import csv

df=pd.read_csv('/content/FinancialAnalyticsdata.csv')

#print(df.info)
#converting the csv file to .db file and storing the data in sales.db
conn = sqlite3.connect('finance_db.db')
df.to_sql('finance_data',conn,if_exists='replace',index=False)

df.shape

df.size

df.columns

#df.describe()

df.ndim

df.isnull().sum()

df.dropna()

#df.describe()

count_unique=df['Name'].value_counts()
print(count_unique)

df.duplicated()
df.drop_duplicates()

#df.groupby('Name')['Mar Cap - Crore'].sum().plot(kind='barh')
#plt.ylabel('Company')
#plt.xlabel('MarCap (in Crores)')
#plt.show()

#df.groupby('Name')['Sales Qtr - Crore'].sum().plot(kind='barh')
#plt.title('Sales by Company(before Imputation)')
#plt.xlabel('Company')
#plt.ylabel('Sales (in Crores)')
#plt.show()

#df.groupby('Name')['Unknown'].sum().plot(kind='barh')
#plt.title('Sales by Company(before Imputation)')
#plt.xlabel('Name')
#plt.ylabel('Unknown Values')
#plt.show()

df['Mar Cap - Crore'].fillna(df['Mar Cap - Crore'].mean(), inplace=True)  #Imputation to fill the null values with mean values

#df.groupby('Name')['Mar Cap - Crore'].sum().plot(kind='barh')
#plt.title('Market capitalization by Company(After Imputation)')
#plt.ylabel('Company')
#plt.xlabel('MarCap (in Crores)')
#plt.show()

df['Sales Qtr - Crore'].fillna(df['Sales Qtr - Crore'].mean(), inplace=True)  #Imputation to fill the null values with mean values

#df.groupby('Name')['Sales Qtr - Crore'].sum().plot(kind='barh')
#plt.title('Sales by Company(after Imputation)')
#plt.ylabel('Company')
#plt.xlabel('Sales (in Crores)')
#plt.show()

df['Unknown'].fillna(df['Unknown'].mean(), inplace=True) #Imputation to fill the null values with mean values

#df.groupby('Name')['Unknown'].sum().plot(kind='barh')
#plt.title('Unknown(after Imputation)')
#plt.ylabel('Company')
#plt.xlabel('Unknown')
#plt.show()

# Group by Company and calculate sum of market capitalization and quarterly sales
Company_stats = df.groupby('Name')[['Mar Cap - Crore', 'Sales Qtr - Crore']].sum().reset_index()

# Sort by market capitalization in descending order
Company_stats = Company_stats.sort_values('Mar Cap - Crore', ascending=False)

# Select top 100 Companies
top_10_Companies = Company_stats.head(10)

# Print the results
print(top_10_Companies)

plt.figure(figsize=(16, 60))  # Adjust the figure size if needed
top_10_Companies.plot(kind='barh', x='Name', y='Mar Cap - Crore', legend=False)

# Adding title and labels
plt.title('Top 10 Companies by Market Capitalization')
plt.xlabel('Market Capitalization (in Crores)')
plt.ylabel('Company')

# Show the plot
plt.show()

plt.figure(figsize=(16, 60))  # Adjust the figure size if needed
top_10_Companies.plot(kind='barh', x='Name', y='Sales Qtr - Crore', legend=False)

# Adding title and labels
plt.title('Top 10 Companies by Quarterly Sales')
plt.xlabel('Sales (in Crores)')
plt.ylabel('Company')

# Show the plot
plt.show()

#scatter plot  of market capitalization vs. quarterly sales to visualize the relationship.
plt.scatter(df['Mar Cap - Crore'], df['Sales Qtr - Crore'])
plt.xlabel('Market Capitalization')
plt.ylabel('Quarterly Sales')
plt.show()
##### scatter plot using seaborn
sns.regplot(x='Mar Cap - Crore', y='Sales Qtr - Crore', data=df)
plt.show()
##### scatter plot using numpy
plt.scatter(df['Mar Cap - Crore'], df['Sales Qtr - Crore'])

# Calculate regression line
z = np.polyfit(df['Mar Cap - Crore'], df['Sales Qtr - Crore'], 3)
p = np.poly1d(z)

# Plot regression line
plt.plot(df['Mar Cap - Crore'], p(df['Mar Cap - Crore']), "r--")

# Find point of inflection (threshold value)
threshold = -z[1] / (2 * z[0])
print("Threshold value (Mar Cap - Crore):", threshold)

plt.xlabel('Mar Cap - Crore')
plt.ylabel('Sales Qtr - Crore')
plt.show()

# Calculating the correlation coefficient (e.g., Pearson's r) between market capitalization and quarterly sales to quantify the strength of the relationship.
corr_coef = np.corrcoef(df['Mar Cap - Crore'], df['Sales Qtr - Crore'])[0, 1]
print(f'Correlation coefficient: {corr_coef:.2f}')

#  Performing a linear regression analysis to model the relationship between market capitalization and quarterly sales. This will help you identify if there's a significant relationship and if there's a threshold effect.
X = df['Mar Cap - Crore'].values.reshape(-1, 1)
y = df['Sales Qtr - Crore'].values
model = LinearRegression().fit(X, y)
print(f'Coefficient of determination (R^2): {model.score(X, y):.2f}')

#Making a decision tree to identify potential thresholds in market capitalization beyond which quarterly sales increase significantly.
# Split data into training and testing sets and build a train test model
train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)
#deciding the best depth for tree
param_grid = {'max_depth': [3, 5, 8, 12]}
grid_search = GridSearchCV(DecisionTreeRegressor(), param_grid, cv=5)
grid_search.fit(df[['Mar Cap - Crore']], df['Sales Qtr - Crore'])

print("Best depth:", grid_search.best_params_['max_depth'])


# Train decision tree model
dt_model = DecisionTreeRegressor(max_depth=grid_search.best_params_['max_depth'], min_samples_leaf=10)
dt_model.fit(train_data[['Mar Cap - Crore']], train_data['Sales Qtr - Crore'])

# Plot decision tree
plt.figure(figsize=(12, 8), dpi=150)
plot_tree(dt_model, feature_names=['Mar Cap - Crore'], class_names=['Sales Qtr - Crore'])
plt.show()